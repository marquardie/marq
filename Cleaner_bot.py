from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext, ConversationHandler)
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime, timedelta, time
import re
from dotenv import load_dotenv
import os

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
creds_json = os.getenv("GOOGLE_CREDS_JSON")
with open("google-creds.json", "w") as f:
    f.write(creds_json.replace("\\n", "\n"))

GOOGLE_CREDS_FILE = "google-creds.json"

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(GOOGLE_CREDS_FILE, scope)
client = gspread.authorize(creds)
sheet = client.open("Window Robot Rental").sheet1
context_sheet = client.open("Window Robot Rental").worksheet("Context")

# –ï—Ç–∞–ø–∏ –¥—ñ–∞–ª–æ–≥—É
DATE, NAME, PHONE, DISTRICT, STREET, DURATION, CONFIRM = range(7)
ADMIN_CHAT_ID = 1168672386

# –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏
def get_available_dates():
    all_dates = sheet.col_values(1)[1:]
    statuses = sheet.col_values(2)[1:]
    formatted_dates = []
    for d in all_dates:
        try:
            parsed = datetime.strptime(d.strip(), '%d.%m.%Y')
            formatted_dates.append(parsed.strftime('%d.%m.%Y'))
        except ValueError:
            try:
                parsed = datetime.strptime(d.strip(), '%Y-%m-%d')
                formatted_dates.append(parsed.strftime('%d.%m.%Y'))
            except ValueError:
                formatted_dates.append(str(d).strip())
    return {date: status.strip().lower() for date, status in zip(formatted_dates, statuses)}

def get_context_text(column_letter):
    return context_sheet.acell(f"{column_letter}2").value

def get_week_start(date):
    return date - timedelta(days=date.weekday())

def generate_week_buttons(week_offset=0):
    today = datetime.now()
    cutoff_time = time(14, 0)
    now_time = today.time()
    available_dates = get_available_dates()
    week_start = get_week_start(today) + timedelta(weeks=week_offset)

    week_buttons = []
    for i in range(6):
        day = week_start + timedelta(days=i)
        str_date = day.strftime("%d.%m.%Y")
        status = available_dates.get(str_date, '')

        is_today = (day.date() == today.date())
        after_cutoff_today = is_today and now_time > cutoff_time

        is_available = status == '–≤—ñ–ª—å–Ω–∞'
        is_disabled = not is_available or (is_today and after_cutoff_today)

        if is_disabled:
            week_buttons.append([InlineKeyboardButton(f"üö´ {str_date}", callback_data="disabled")])
        else:
            week_buttons.append([InlineKeyboardButton(f"‚úÖ {str_date}", callback_data=f"select_{str_date}")])

    nav_buttons = [[
        InlineKeyboardButton("‚û°Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å", callback_data="next_week") if week_offset == 0 else InlineKeyboardButton("‚¨ÖÔ∏è –ü–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å", callback_data="current_week"),
        InlineKeyboardButton("üìã –ú–µ–Ω—é", callback_data="menu")
    ]]
    week_buttons.extend(nav_buttons)
    return InlineKeyboardMarkup(week_buttons)

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ ---
def show_start_button(update: Update, context: CallbackContext):
    keyboard = [[KeyboardButton("üìã –ú–µ–Ω—é")]]
    update.message.reply_text("–ù–∞—Ç–∏—Å–Ω–∏, —â–æ–± –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ ‚¨áÔ∏è", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))

def send_menu(chat_id, context):
    keyboard = [
        [InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞ –æ—Ä–µ–Ω–¥–∏", callback_data="rules")],
        [InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∞ —ñ —É–º–æ–≤–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ üìç", callback_data="payment")],
        [InlineKeyboardButton("‚úÖ –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏", callback_data="book_now")],
        [InlineKeyboardButton("üõ† –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è", callback_data="manual")]
    ]
    context.bot.send_message(chat_id=chat_id, text="üìã –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=InlineKeyboardMarkup(keyboard))

def start(update: Update, context: CallbackContext):
    send_menu(update.message.chat_id, context)

def handle_info_buttons(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    data = query.data

    if data == "rules":
        text = get_context_text("B")
    elif data == "payment":
        text = get_context_text("C")
    elif data == "manual":
        text = get_context_text("A")
    elif data == "menu":
        send_menu(query.from_user.id, context)
        return ConversationHandler.END
    elif data == "book_now":
        query.edit_message_text("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –í–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:")
        return NAME
    else:
        text = "–û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫!"

    query.edit_message_text(text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu")]]))
    
def handle_duration(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    duration = int(query.data.split("_")[1])
    context.user_data['duration'] = duration
    query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:", reply_markup=generate_week_buttons())
    return DATE

def select_date(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    if query.data.startswith("select_"):
        selected_date = query.data.replace("select_", "")
        context.user_data['selected_date'] = selected_date  # üîß –ë–µ–∑ .clear()
        query.message.delete()
        confirm_text = (f"–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –¥–∞–Ω—ñ –ø–µ—Ä–µ–¥ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è–º:\n"
                        f"–î–∞—Ç–∞: {selected_date} ({context.user_data.get('duration', 1)} –¥–æ–±–∞/–¥–æ–±)\n"
                        f"–Ü–º'—è: {context.user_data.get('name')}\n"
                        f"–†–∞–π–æ–Ω: {context.user_data.get('district')}\n"
                        f"–í—É–ª–∏—Ü—è: {context.user_data.get('street')}\n"
                        f"–¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone')}\n\n–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏?")
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data='confirm')],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='cancel')]
        ]
        context.bot.send_message(chat_id=query.from_user.id, text=confirm_text, reply_markup=InlineKeyboardMarkup(keyboard))
        return CONFIRM

    if query.data == "disabled":
        query.answer("–¶—è –¥–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –û–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É –¥–∞—Ç—É", show_alert=True)
        return DATE
    if query.data == "next_week":
        query.edit_message_reply_markup(reply_markup=generate_week_buttons(week_offset=1))
        return DATE
    if query.data == "current_week":
        query.edit_message_reply_markup(reply_markup=generate_week_buttons(week_offset=0))
        return DATE

# --- –°—Ü–µ–Ω–∞—Ä—ñ–π –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è ---
def get_name(update: Update, context: CallbackContext):
    name = update.message.text.strip()

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: —Ç—ñ–ª—å–∫–∏ –ª—ñ—Ç–µ—Ä–∏ —ñ –ø—Ä–æ–±—ñ–ª–∏, –º—ñ–Ω—ñ–º—É–º 2 –ª—ñ—Ç–µ—Ä–∏
    if not re.fullmatch(r"[A-Za-z–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î“ê“ë\s]+", name) or len(name.replace(" ", "")) < 2:
        update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è (–ª–∏—à–µ –ª—ñ—Ç–µ—Ä–∏, –º—ñ–Ω—ñ–º—É–º 2 —Å–∏–º–≤–æ–ª–∏):")
        return NAME

    context.user_data['name'] = name
    districts = [[InlineKeyboardButton(d, callback_data=d)] for d in [
        "üèõ –ì–∞–ª–∏—Ü—å–∫–∏–π", "üè° –§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∏–π", "üå≥ –°–∏—Ö—ñ–≤—Å—å–∫–∏–π",
        "üöâ –ó–∞–ª—ñ–∑–Ω–∏—á–Ω–∏–π", "üå≤ –®–µ–≤—á–µ–Ω–∫—ñ–≤—Å—å–∫–∏–π", "üè∞ –õ–∏—á–∞–∫—ñ–≤—Å—å–∫–∏–π", "üèò –û–∫–æ–ª–∏—Ü—ñ"
    ]]
    update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω:", reply_markup=InlineKeyboardMarkup(districts))
    return DISTRICT


def get_district(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    context.user_data['district'] = query.data
    context.bot.send_message(chat_id=query.from_user.id, text="–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:")
    return STREET

def normalize_street(text):
    text = text.lower()
    text = re.sub(r"^–≤—É–ª\\.?\\s*|–≤—É–ª–∏—Ü—è\\s*", "", text)
    text = re.sub(r"\\s+\\d+.*", "", text)
    return text.strip()

def get_street(update: Update, context: CallbackContext):
    user_input = update.message.text.strip()
    street = normalize_street(user_input)
    if len(street) < 3:
        update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –Ω–∞–∑–≤—É –≤—É–ª–∏—Ü—ñ (–º—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∏):")
        return STREET
    context.user_data['street'] = user_input
    update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

def get_phone(update: Update, context: CallbackContext):
    phone = update.message.text.strip().replace(" ", "")
    pattern = r'^(\+?380|0)?(67|68|96|97|98|77|50|66|95|99|75|63|73|93)\d{7}$'
    if not re.match(pattern, phone):
        update.message.reply_text("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: 067xxxxxxx –∞–±–æ +38067xxxxxxx")
        return PHONE
    context.user_data['phone'] = phone

    keyboard = [
        [InlineKeyboardButton("1 –¥–æ–±–∞", callback_data="duration_1")],
        [InlineKeyboardButton("2 –¥–æ–±–∏", callback_data="duration_2")]
    ]
    update.message.reply_text("–ù–∞ —Å–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ —Ö–æ—á–µ—Ç–µ –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏?", reply_markup=InlineKeyboardMarkup(keyboard))
    return DURATION

def handle_duration(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    duration = int(query.data.split("_")[1])
    context.user_data['duration'] = duration
    query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:", reply_markup=generate_week_buttons())
    return DATE

def confirm_booking(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    data = context.user_data

    if query.data == 'confirm':
        cell = sheet.find(data['selected_date'])
        duration = data.get('duration', 1)

        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ
        for i in range(duration):
            row = cell.row + i
            status = sheet.cell(row, 2).value.strip().lower()
            if status != '–≤—ñ–ª—å–Ω–∞':
                query.edit_message_text(
                    f"–ù–∞ –∂–∞–ª—å, –¥–∞—Ç–∞ {sheet.cell(row, 1).value} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—ñ –¥–∞—Ç–∏.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏", callback_data="retry_date")]
                    ])
                )
                return CONFIRM

        # –û–Ω–æ–≤–∏—Ç–∏ –¥–∞–Ω—ñ –¥–ª—è –≤—Å—ñ—Ö –¥–Ω—ñ–≤
        for i in range(duration):
            row = cell.row + i
            sheet.update(f"C{row}:F{row}", [[data['name'], '', data['phone'], f"{data['district']} - {data['street']}"]])
            sheet.update_cell(row, 2, '–∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∞')

        query.edit_message_text(
            f"–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑ {data['selected_date']} {'–Ω–∞ 2 –¥–æ–±–∏' if duration == 2 else '–Ω–∞ 1 –¥–æ–±—É'} –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –ë—É–¥—å –ª–∞—Å–∫–∞, –æ—á—ñ–∫—É–π—Ç–µ –¥–∑–≤—ñ–Ω–∫–∞ –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìã –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é", callback_data="menu")]])
        )

        context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=(
                f"–ù–û–í–ï –ë–†–û–ù–Æ–í–ê–ù–ù–Ø:\n"
                f"–î–∞—Ç–∞: {data['selected_date']} ({duration} –¥–æ–±–∞/–¥–æ–±)\n"
                f"{data['name']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
                f"–ê–¥—Ä–µ—Å–∞: {data['district']} - {data['street']}"
            )
        )
        return ConversationHandler.END

    elif query.data == 'retry_date':
        query.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:", reply_markup=generate_week_buttons())
        return DATE

    elif query.data == 'cancel':
        query.edit_message_text(
            "–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìã –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é", callback_data="menu")]])
        )
        return ConversationHandler.END

def cancel(update: Update, context: CallbackContext):
    if update.callback_query:
        update.callback_query.answer()
        update.callback_query.edit_message_text("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    else:
        update.message.reply_text("–ë—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# --- MAIN ---
def main():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", show_start_button))
    dp.add_handler(MessageHandler(Filters.regex("^üìã –ú–µ–Ω—é$"), start))

    # –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –æ–∫—Ä–µ–º–æ
    dp.add_handler(CallbackQueryHandler(handle_info_buttons, pattern='^(rules|payment|manual|menu)$'))

    conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(handle_info_buttons, pattern='^book_now$')
        ],
        states={
            DATE: [
                CallbackQueryHandler(select_date, pattern='^select_.*$'),
                CallbackQueryHandler(select_date, pattern='^(next_week|current_week|disabled)$')
            ],
            NAME: [MessageHandler(Filters.text & ~Filters.command, get_name)],
            DISTRICT: [CallbackQueryHandler(get_district)],
            STREET: [MessageHandler(Filters.text & ~Filters.command, get_street)],
            PHONE: [MessageHandler(Filters.text & ~Filters.command, get_phone)],
            DURATION: [CallbackQueryHandler(handle_duration, pattern='^duration_')],
            CONFIRM: [
                CallbackQueryHandler(confirm_booking, pattern='^confirm$'),
                CallbackQueryHandler(confirm_booking, pattern='^cancel$'),
                CallbackQueryHandler(confirm_booking, pattern='^retry_date$'),
    ]
},
        fallbacks=[
            CommandHandler("cancel", cancel),
            CallbackQueryHandler(cancel, pattern='^cancel$')
        ],
        allow_reentry=True
    )

    dp.add_handler(conv_handler)
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
